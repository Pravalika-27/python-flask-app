pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        REPO_URL = 'https://github.com/bhargavibairagoni/python-flask-app.git'
        IMAGE_NAME = 'flask-app'
        ECR_URL = '905418365089.dkr.ecr.us-east-1.amazonaws.com/flask-app:latest'
        EKS_CLUSTER_NAME= 'eks-cluster'
        AWS_ACCESS_KEY = '$AWS_ACCESS_KEY'
        AWS_SECRET_KEY = '$AWS_SECRET_KEY'
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }
        stage('create Eks') {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY', secretKeyVariable: 'AWS_SECRET_KEY')]) {
                    script {
                        sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws configure set region $AWS_REGION
                        if ! eksctl get cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION; then
                            eksctl create cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION --fargate
                        else
                            echo "Cluster already exists."
                        fi
                        '''
                    }
                }
            }
        }
        stage('Deploy to Eks') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY', secretKeyVariable: 'AWS_SECRET_KEY')]) {
                        sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws configure set region $AWS_REGION
                        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
                        kubectl apply -f $REPO_URL/kubernetes/Deployment.yml
                        '''
                    }
                }
            }
        }
    }
}
