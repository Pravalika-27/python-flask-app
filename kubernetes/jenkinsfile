pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        EKS_CLUSTER_NAME = 'eks-cluster'
        REPO_URL = 'https://github.com/bhargavibairagoni/python-flask-app.git'
        BRANCH = 'main'
    }
    stages {
        stage('Clone Code') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Create EKS Cluster') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY', secretKeyVariable: 'AWS_SECRET_KEY')]) {
                        sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY
                        aws configure set aws_secret_access_key $AWS_SECRET_KEY
                        aws configure set region $AWS_REGION

                        if ! eksctl get cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION; then
                            eksctl create cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION --fargate
                        else
                            echo "Cluster already exists."
                        fi
                        '''
                    }
                }
            }
        }

        stage('Build & Deploy to EKS') {
            steps {
                script {
                    sh '''
                    aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
                    
                    # Create a Fargate profile for deployment (optional)
                    eksctl create fargateprofile \
                    --cluster $EKS_CLUSTER_NAME \
                    --region $AWS_REGION \
                    --name alb-sample-app \
                    --namespace flask-app

                    # Deploy the application using Kubernetes manifests
                    kubectl create -f https://github.com/bhargavibairagoni/python-flask-app.git/kubernetes/Deployment.yml
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
